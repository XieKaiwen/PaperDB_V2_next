generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Paper {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId                String                    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subjectId               String                    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  educationLevel          edu_level
  totalMark               Int                       @db.SmallInt
  examType                exam_type
  visible                 Boolean                   @default(true)
  year                    String
  MCQQuestion             MCQQuestion[]
  OEQQuestion             OEQQuestion[]
  School                  School                    @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Subject                 Subject                   @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  UserPaperProgressStatus UserPaperProgressStatus[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model School {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolType      school_type
  schoolFullName  String
  schoolShortName String
  Paper           Paper[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Subject {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subjectName     String        @unique
  educationLevels edu_level[]
  MCQQuestion     MCQQuestion[]
  OEQQuestion     OEQQuestion[]
  Paper           Paper[]
  Topic           Topic[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Topic {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subjectId      String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topicName      String
  educationLevel edu_level
  Subject        Subject   @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// Add a role enum 
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                   String                    @unique
  dateJoined              DateTime                  @default(now()) @db.Timestamptz(6)
  educationLevel          edu_level
  role                    user_role                 @default(user)
  phoneNumber             String
  username                String
  UserLog                 UserLog[]
  UserMCQAnswer           UserMCQAnswer[]
  UserOEQAnswer           UserOEQAnswer[]
  UserPaperProgressStatus UserPaperProgressStatus[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  logInfo    String
  dateLogged DateTime @default(now()) @db.Timestamptz(6)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MCQQuestion {
  id                  String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  paperId             String          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subjectId           String          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topicId             String[]        @db.Uuid
  questionInformation Json
  questionNum         Int             @db.SmallInt
  fullMark            Int             @db.SmallInt
  difficulty          difficulty
  percentageCorrect   Float?
  Paper               Paper           @relation(fields: [paperId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Subject             Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  UserMCQAnswer       UserMCQAnswer[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model OEQQuestion {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subjectId     String          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  paperId       String          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  questionNum   Int             @db.SmallInt
  questionInfo  Json
  fullMark      Int             @db.SmallInt
  difficulty    difficulty
  passingRate   Float?
  Paper         Paper?          @relation(fields: [paperId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Subject       Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  UserOEQAnswer UserOEQAnswer[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserMCQAnswer {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  MCQId         String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userAnswer    String
  obtainedMarks Int         @db.SmallInt
  MCQQuestion   MCQQuestion @relation(fields: [MCQId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserOEQAnswer {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  OEQId         String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  index         String?
  subIndex      String?
  userAnswer    String
  obtainedMarks Float?      @default(0) @db.Real
  marked        Boolean     @default(false)
  OEQQuestion   OEQQuestion @relation(fields: [OEQId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserPaperProgressStatus {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  paperId        String          @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  progressStatus progress_status @default(In_Progress)
  currentScore   Float           @default(0) @db.Real
  Paper          Paper           @relation(fields: [paperId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum edu_level {
  P1
  P2
  P3
  P4
  P5
  P6
  S1
  S2
  S3
  S4
  J1
  J2
}

enum exam_type {
  CA1
  CA2
  SA1
  SA2
  PSLE
  WA
  SA
  O_level      @map("O-level")
  Common_test  @map("Common test")
  Block_test   @map("Block test")
  Prelim_Promo @map("Prelim/Promo")
  A_level      @map("A-level")
}

enum school_type {
  Primary
  Secondary
  JC
}

enum difficulty {
  Easy
  Medium
  Hard
}

enum progress_status {
  In_Progress @map("In Progress")
  Submitted
  Marked
}

enum user_role {
  user
  admin
}
