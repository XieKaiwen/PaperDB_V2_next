generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Paper {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolId                String                    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subjectId               String                    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                  String                    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  educationLevel          edu_level
  totalMark               Int                       @default(0) @db.SmallInt
  examType                exam_type
  visible                 Boolean                   @default(false)
  year                    String
  dateAdded               DateTime                  @default(now()) @db.Timestamptz(6)
  School                  School                    @relation(fields: [schoolId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Subject                 Subject                   @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  UserPaperProgressStatus UserPaperProgressStatus[]
  Question                Question[]
  User                    User                      @relation(fields: [userId], references: [id])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model School {
  id              String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  schoolType      SchoolType
  schoolFullName  String
  schoolShortName String
  Paper           Paper[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Subject {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subjectName     String      @unique
  educationLevels edu_level[]
  Paper           Paper[]
  Topic           Topic[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Topic {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subjectId      String    @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topicName      String
  educationLevel edu_level
  Subject        Subject   @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// Add a role enum 
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                   String                    @unique
  dateJoined              DateTime                  @default(now()) @db.Timestamptz(6)
  educationLevel          edu_level
  role                    UserRole                  @default(USER)
  phoneNumber             String
  username                String
  UserLog                 UserLog[]
  UserPaperProgressStatus UserPaperProgressStatus[]
  Paper                   Paper[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String   @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  logInfo    String
  dateLogged DateTime @default(now()) @db.Timestamptz(6)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Question {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  paperId         String       @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  questionType    QuestionType
  isMulti         Boolean?
  topics          String[]
  fullMark        Int          @db.SmallInt // total marks for the question
  markScheme      Json? // marks for each section
  difficulty      Difficulty?
  passingRate     Float?
  questionNumber  Int
  questionLeafs   Json?
  questionContent Json
  questionAnswer  Json
  Paper           Paper        @relation(fields: [paperId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([paperId, questionNumber])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
// model UserMCQAnswer {
//   id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   userId        String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   MCQId         String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   userAnswer    String
//   obtainedMarks Int         @db.SmallInt
//   MCQQuestion   MCQQuestion @relation(fields: [MCQId], references: [id], onDelete: Cascade, onUpdate: NoAction)
//   User          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
// }

// /// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
// model UserOEQAnswer {
//   id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   userId        String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   OEQId         String      @default(dbgenerated("gen_random_uuid()")) @db.Uuid
//   index         String?
//   subIndex      String?
//   userAnswer    String
//   obtainedMarks Float?      @default(0) @db.Real
//   marked        Boolean     @default(false)
//   OEQQuestion   OEQQuestion @relation(fields: [OEQId], references: [id], onDelete: Cascade, onUpdate: NoAction)
//   User          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
// }

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserPaperProgressStatus {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String         @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  paperId        String         @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  progressStatus ProgressStatus @default(IN_PROGRESS)
  currentScore   Float          @default(0) @db.Real
  Paper          Paper          @relation(fields: [paperId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User           User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum edu_level {
  P1
  P2
  P3
  P4
  P5
  P6
  S1
  S2
  S3
  S4
  J1
  J2
}

enum QuestionType {
  MCQ
  OEQ
}

enum exam_type {
  CA1
  CA2
  SA1
  SA2
  PSLE
  WA
  SA
  O_LEVEL     @map("O Level")
  COMMON_TEST @map("Common Test")
  BLOCK_TEST  @map("Block Test")
  PRELIM      @map("Preliminary Exam")
  PROMO       @map("Promotional Exam")
  A_LEVEL     @map("A Level")
  OTHER       @map("Other")
}

enum SchoolType {
  PRIMARY
  SECONDARY
  JC
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  IN_PROGRESS @map("In Progress")
  SUBMITTED   @map("submitted")
  MARKED      @map("marked")
}

enum UserRole {
  USER
  ADMIN
}
